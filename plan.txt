* Write out the state for the latest invocation only which contains the input signature and output signature. Also add the return value of the process.
* In the exe check if the input signature from the latest written invocation matches the current input signature on disk. If so skip and return the saved return value for the process. 
* Handle subprocess creation
	-> basically what we do in the dep exe needs to happen from within the dll as well, recursively setting up itself within the next child
	-> if up to date, instead launch a depskip.exe process which will accept the return value given by the previous invocation and return that to maintain opaque operation to the intercepted process
	-> Check if subprocess creation is trying to launch via dep as well. If so, do not attempt to intercept. 
* ...
* Profit?


TODOs:
* make things like dep cache location configurable via a dep.cfg that sits in the exe/dll folder
* Add the ability to ignore certain files or file types via dep.cfg
* Add some debug ability to check for hash collisions. 


Optimizations:
* Need to set up measurements on how much time the overhead for dep is consuming. 
* Currently dep.exe has to compute input hashes, then if not skipped the dll does it again. This could be collapsed into one, since the input hashes need to be computed up-front anyway. Detours CopyPayload may be a path to doing this?


Potential next steps:
* Figure out how to expand dep to support saving not just the last executed state for skipping, but also every previous invocation. So if the n-2 invocation is the same as the n invocation but not the n-1 invocation, then it can restore the outputs produced by the n-2 invocation. 
* Tools for maintaining how much space is being consumed by the dep cache. 
	-> maybe should live in depwatcher? other option is to check the usage of the cache with every invocation of dep, but this could be a lengthy process for a large cache
		-> or just create a separate utility, more work than depwatcher option but reasonable if depwatcher hasn't been implemented and this is high priority
	-> touch the cache file every time it's used for the result of an operation so we can do a least-recently-used eviction system
* Implement depwatcher
	-> have a persistent shared system process which caches hash results for large/all files?
	-> reduce the amount of time spent re-hashing often used or large files
* Dep build cache
	-> have a dep server that dep users can pass up their build results so other users can resuse their results instead of having to build everything the first time
* Distribute dep work 
	-> If depwatcher sees that the build cache doesn't have a result, optionally send the exe, inputs and command to another client to perform. 
		-> would need to figure out how to load level across clients
	-> not sure if this is feasible?
