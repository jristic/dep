1. Setup a path where the dep files will be written to.
	a. start with a hardcoded path
		-> use a depcache subfolder in the dep exe/dll folder as a default
		-> initially, write out a log file for each invocation with info about 
			-> need to generate a unique file name from the date 
	b. make it configurable via a dep.cfg that sits in the exe/dll folder
2. Set up a hashing scheme for files and command lines 
3. Start hashing inputs and write their values out into dep summary files
	a. Write the output hashes as well. 
4. Store output results for each given overall input hash.
5. Skip execution step and copy stored results if input hash matches previously compiled one
6. Tools for maintaining how much space is being consumed by the dep cache. 
	-> maybe should live in depwatcher? other option is to check the usage of the cache with every invocation of dep, but this could be a lengthy process for a large cache
		-> or just create a separate utility, more work than depwatcher option but reasonable if depwatcher hasn't been implemented and this is high priority
	-> touch the cache file every time it's used for the result of an operation so we can do a least-recently-used eviction system
7. ...
8. Profit?


Potential next steps:
	1. Implement depwatcher
		-> have a persistent shared system process which caches hash results for large/all files?
		-> reduce the amount of time spent re-hashing often used or large files
	2. Dep build cache
		-> have a dep server that dep users can pass up their build results so other users can resuse their results instead of having to build everything the first time
	3. Distribute dep work 
		-> If depwatcher sees that the build cache doesn't have a result, optionally send the exe, inputs and command to another client to perform. 
			-> would need to figure out how to load level across clients
		-> not sure if this is feasible?
